// <auto-generated />
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using SemanticAlgebra.SourceGenerator.Models;
using System.Text;

namespace SemanticAlgebra.SourceGenerator.Generators;

/// <summary>
/// Generates data definitions (Option.D class)
/// </summary>
public static class DataDefinitionGenerator
{
    /// <summary>
    /// Generates the complete D class with all data definitions
    /// </summary>
    public static string GenerateDataDefinitionsClass(SemanticKindInfo kindInfo)
    {
        var sb = new StringBuilder();
        
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("using SemanticAlgebra;");
        sb.AppendLine();
        
        if (!string.IsNullOrEmpty(kindInfo.Namespace))
        {
            sb.AppendLine($"namespace {kindInfo.Namespace};");
            sb.AppendLine();
        }
        
        sb.AppendLine($"partial class {kindInfo.ClassName}");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// {kindInfo.ClassName} data definitions");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static class D");
        sb.AppendLine("    {");
        
        // Generate data definition records
        foreach (var method in kindInfo.SemanticMethods)
        {
            var caseInfo = new SemanticCaseGenerationInfo(kindInfo, method);
            sb.AppendLine(caseInfo.GetDataDefinitionSource());
            sb.AppendLine();
        }
        
        sb.AppendLine("    }");
        sb.AppendLine("}");
        
        return sb.ToString();
    }
}
