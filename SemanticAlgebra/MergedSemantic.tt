<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using SemanticAlgebra.Data;

namespace SemanticAlgebra;

<# foreach(var n in Enumerable.Range(2, 9)) { #>
public interface IMergedSemantic1<
    TMS<# foreach(var x in Enumerable.Range(1, n)) { #>,
    TS<#= x #><# } #>> : IFunctor<TMS>
    where TMS : IMergedSemantic1<TMS<# foreach(var x in Enumerable.Range(1, n)) { #>, TS<#= x #><# } #>><# foreach(var x in Enumerable.Range(1, n)) { #>, TS<#= x #><# } #>
<# foreach(var x in Enumerable.Range(1, n)) { #>
    where TS<#= x #> : IFunctor<TS<#= x #>>
<# } #>
{
    static abstract ISemantic1<TMS, TS, TR> MergeSemantic<TS, TR>(
<# foreach(var x in Enumerable.Range(1, n)) { #>
        ISemantic1<TS<#= x #>, TS, TR> s<#= x #><#= x == n ? "" : "," #>
<# } #>
    );

    static ISemantic1<TMS, TS, TR> IKind1<TMS>.Compose<TS, TI, TR>(
        ISemantic1<TMS, TS, TI> s, Func<TI, TR> f)
        => TMS.MergeSemantic(
<# foreach(var x in Enumerable.Range(1, n)) { #>
            TS<#= x #>.Compose((ISemantic1<TS<#= x #>, TS, TI>)s, f)<#= x == n ? ");" : "," #>
<# } #>

    static ISemantic1<TMS, T, IS<TMS, T>> IKind1<TMS>.Id<T>()
        => TMS.MergeSemantic<T, IS<TMS, T>>(
<# foreach(var x in Enumerable.Range(1, n)) { #>
            TS<#= x #>.Id<T>().Compose(e => (IS<TMS, T>)e)<#= x == n ? ");" : "," #>
<# } #>

    static ISemantic1<TMS, TS, IS<TMS, TR>> IFunctor<TMS>.MapS<TS, TR>(Func<TS, TR> f)
        => TMS.MergeSemantic<TS, IS<TMS, TR>>(
<# foreach(var x in Enumerable.Range(1, n)) { #>
            TS<#= x #>.MapS(f).Compose(e => (IS<TMS, TR>)e)<#= x == n ? ");" : "," #>
<# } #>
}

public interface IMergedSemantic1Implements<
    TMS,
    TAlg,
    T<# foreach(var x in Enumerable.Range(1, n)) { #>,
    TS<#= x #><# } #>>
    : IMergedSemantic1<TMS<# foreach(var x in Enumerable.Range(1, n)) { #>, TS<#= x #><# } #>>
    , IImplements<TMS, TAlg, T>
    where TMS : IMergedSemantic1Implements<TMS, TAlg, T<# foreach(var x in Enumerable.Range(1, n)) { #>, TS<#= x #><# } #>><# foreach(var x in Enumerable.Range(1, n)) { #>, TS<#= x #><# } #>
    where TAlg : IAlgebra<TAlg, T>
<# foreach(var x in Enumerable.Range(1, n)) { #>
    where TS<#= x #> : IImplements<TS<#= x #>, TAlg, T>
<# } #>
{
    static ISemantic1<TMS, T, T> IImplements<TMS, TAlg, T>.Get()
        => TMS.MergeSemantic(
<# foreach(var x in Enumerable.Range(1, n)) { #>
            TS<#= x #>.Get()<#= x == n ? ");" : "," #>
<# } #>
}

<# } #>

